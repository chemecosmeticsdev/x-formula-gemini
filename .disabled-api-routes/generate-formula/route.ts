
import { NextRequest } from "next/server";
import type { FormData, GeneratedFormula } from "@/lib/types";
import ingredientsData from "@/data/chemeco_ingredients_sample.json";

// Gemini API Configuration
const GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent";

export async function POST(request: NextRequest) {
  try {
    const data: FormData = await request.json();
    
    if (!data.productDescription?.trim()) {
      return new Response(
        JSON.stringify({ status: 'error', message: 'Product description is required' }),
        { 
          status: 400, 
          headers: { 'Content-Type': 'application/json' }
        }
      );
    }

    // Create the prompt for formula generation
    const prompt = createFormulaPrompt(data.productDescription, ingredientsData);

    // Make request to Gemini API
    const geminiResponse = await fetch(`${GEMINI_API_URL}?key=${process.env.GEMINI_API_KEY}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: prompt
          }]
        }],
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.9,
          maxOutputTokens: 4000,
        },
        safetySettings: [
          {
            category: "HARM_CATEGORY_HARASSMENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_HATE_SPEECH", 
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_DANGEROUS_CONTENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          }
        ]
      }),
    });

    if (!geminiResponse.ok) {
      throw new Error(`Gemini API error: ${geminiResponse.status} ${geminiResponse.statusText}`);
    }

    const geminiResult = await geminiResponse.json();
    
    if (!geminiResult.candidates?.[0]?.content?.parts?.[0]?.text) {
      throw new Error('No content generated by Gemini API');
    }

    let generatedText = geminiResult.candidates[0].content.parts[0].text;

    // Parse the JSON response
    let formulaData: GeneratedFormula;
    try {
      // Clean up the response to extract JSON
      const jsonStart = generatedText.indexOf('{');
      const jsonEnd = generatedText.lastIndexOf('}') + 1;
      if (jsonStart === -1 || jsonEnd === 0) {
        throw new Error('No valid JSON found in response');
      }
      const jsonString = generatedText.substring(jsonStart, jsonEnd);
      formulaData = JSON.parse(jsonString);
    } catch (parseError) {
      console.error('JSON Parse Error:', parseError);
      console.error('Raw response:', generatedText);
      throw new Error('Failed to parse formula data from AI response');
    }

    // Generate a product mockup image
    try {
      const imageUrl = await generateProductMockup(formulaData.name, formulaData.description);
      formulaData.mockup_image = imageUrl;
    } catch (imageError) {
      console.error('Image generation failed:', imageError);
      // Continue without image - it's optional
    }

    // Create streaming response
    const stream = new ReadableStream({
      start(controller) {
        // Send processing status
        const processingData = JSON.stringify({
          status: 'processing',
          message: 'Finalizing formula'
        });
        controller.enqueue(`data: ${processingData}\n\n`);

        // Send final result
        const completedData = JSON.stringify({
          status: 'completed',
          result: formulaData
        });
        controller.enqueue(`data: ${completedData}\n\n`);
        
        controller.enqueue(`data: [DONE]\n\n`);
        controller.close();
      },
    });

    return new Response(stream, {
      headers: {
        'Content-Type': 'text/plain; charset=utf-8',
        'Cache-Control': 'no-cache',
        'Connection': 'keep-alive',
      },
    });

  } catch (error) {
    console.error('Error generating formula:', error);
    
    const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
    
    return new Response(
      JSON.stringify({ 
        status: 'error', 
        message: `Formula generation failed: ${errorMessage}` 
      }),
      { 
        status: 500, 
        headers: { 'Content-Type': 'application/json' }
      }
    );
  }
}

function createFormulaPrompt(description: string, ingredients: any[]): string {
  const availableIngredients = ingredients.map(ing => ({
    name: ing.english_name || ing.name,
    function: extractFunction(ing.name),
    usage: extractUsage(ing.name)
  })).filter(ing => ing.name && ing.function);

  return `You are a professional cosmetics formulation scientist. Based on the product description, create a detailed cosmetics formula using available ingredients.

PRODUCT REQUEST:
${description}

AVAILABLE INGREDIENTS:
${availableIngredients.map(ing => `- ${ing.name} (${ing.function}) - Usage: ${ing.usage}`).join('\n')}

Please respond with a valid JSON object only (no markdown, no extra text) with this exact structure:

{
  "name": "Product Name",
  "type": "Product Type (e.g. Serum, Cream, Lotion)",
  "description": "Detailed product description",
  "ingredients": [
    {
      "name": "Ingredient Name",
      "inci_name": "INCI Name if known",
      "percentage": 2.5,
      "function": "emulsifier/active/preservative/etc",
      "phase": "A"
    }
  ],
  "instructions": [
    "Step 1: Processing instruction",
    "Step 2: Next instruction"
  ],
  "properties": {
    "ph": "5.5-6.0",
    "viscosity": "Medium",
    "stability": "Stable for 24 months",
    "shelfLife": "24 months"
  },
  "claims": [
    "Suitable for sensitive skin",
    "Fast absorbing"
  ],
  "cost_estimate": "$8.50"
}

IMPORTANT GUIDELINES:
- Total percentages must equal 100%
- Use phases A (water), B (oil), C (emulsifiers), D (actives/preservatives)
- Include realistic usage percentages for each ingredient
- Ensure pH is skin-friendly (4.5-7.0)
- Include proper preservative system
- Make ingredients relevant to the product request
- Cost estimate should be reasonable for 100g

Generate a professional, manufacturable formula that addresses all requirements in the product description.`;
}

function extractFunction(ingredientName: string): string {
  const name = ingredientName.toLowerCase();
  
  if (name.includes('thickener') || name.includes('gel') || name.includes('viscosity')) return 'thickener';
  if (name.includes('emulsifier') || name.includes('wax')) return 'emulsifier';
  if (name.includes('preservative') || name.includes('antimicrobial')) return 'preservative';
  if (name.includes('active') || name.includes('vitamin') || name.includes('peptide')) return 'active';
  if (name.includes('moisturizer') || name.includes('hydrate')) return 'humectant';
  if (name.includes('oil') || name.includes('butter')) return 'emollient';
  if (name.includes('surfactant') || name.includes('cleanser')) return 'surfactant';
  if (name.includes('colorant') || name.includes('pigment')) return 'colorant';
  if (name.includes('fragrance') || name.includes('scent')) return 'fragrance';
  
  return 'functional ingredient';
}

function extractUsage(ingredientName: string): string {
  const name = ingredientName.toLowerCase();
  
  if (name.includes('preservative')) return '0.5-1.0%';
  if (name.includes('active') || name.includes('vitamin')) return '1-5%';
  if (name.includes('thickener') || name.includes('gel')) return '0.5-3%';
  if (name.includes('emulsifier')) return '2-8%';
  if (name.includes('oil') || name.includes('butter')) return '5-15%';
  if (name.includes('colorant')) return '0.1-2%';
  if (name.includes('fragrance')) return '0.1-0.5%';
  
  return '1-5%';
}

async function generateProductMockup(productName: string, description: string): Promise<string> {
  try {
    // Create a NanoBanana-style prompt for product mockup generation
    const imagePrompt = `Generate a high-quality, professional cosmetic product mockup for "${productName}".

Product Details: ${description}

Style Requirements:
- Clean, modern aesthetic with soft shadows and premium lighting
- Minimalist packaging design with elegant typography
- Soft pastel color palette with white/cream background gradient
- Professional product photography style similar to high-end beauty brands like Glossier, Fenty Beauty, or The Ordinary
- Show the product in an attractive cosmetic container (serum dropper bottle, cream jar, cleanser tube, or pump dispenser as appropriate)
- Include subtle geometric patterns or soft bokeh backgrounds
- Add realistic reflections and shadows for depth
- Premium, luxury cosmetic product aesthetic
- Instagram-worthy and visually appealing composition
- Clean, sans-serif fonts for any branding
- 16:9 aspect ratio for optimal display

Technical requirements:
- Photorealistic 3D rendering style
- Commercial product photography quality
- High resolution and crisp details
- Professional studio lighting setup`;

    // Generate product mockup using external image generation service
    const mockupResponse = await fetch('/api/generate-image', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        prompt: imagePrompt,
        productName,
        description
      }),
    });

    if (mockupResponse.ok) {
      const mockupResult = await mockupResponse.json();
      if (mockupResult.imageUrl) {
        return mockupResult.imageUrl;
      }
    }
    
    // If image generation fails, return a curated high-quality stock image
    return generateStockImageUrl(productName, description);
    
  } catch (error) {
    console.error('Error generating product mockup:', error);
    // Return a high-quality fallback image that matches the aesthetic
    return generateStockImageUrl(productName, description);
  }
}

async function generateImageWithImagenFallback(productName: string, description: string): Promise<string> {
  try {
    // Use Imagen API through Google Cloud
    const imagePrompt = `Professional cosmetic product photography of "${productName}". ${description}. Clean white background, soft lighting, luxury beauty product styling, high-end commercial photography, 16:9 aspect ratio, ultra-realistic, premium packaging design`;
    
    // For demo purposes, skip the Google Cloud Imagen API and go directly to fallback
    throw new Error('Using fallback image generation');
  } catch (error) {
    console.error('Imagen fallback failed:', error);
  }
  
  // Final fallback - use a high-quality stock image that fits the aesthetic
  return generateStockImageUrl(productName, description);
}

function generateStockImageUrl(productName: string, description: string): string {
  // Generate a URL to a relevant stock image based on the product type
  const productType = description.toLowerCase();
  
  if (productType.includes('serum')) {
    return 'https://images.unsplash.com/photo-1620916566398-39f1143ab7be?w=800&h=450&fit=crop&auto=format';
  } else if (productType.includes('cream') || productType.includes('moisturizer')) {
    return 'https://images.unsplash.com/photo-1556228578-dd4ab4d32b2c?w=800&h=450&fit=crop&auto=format';
  } else if (productType.includes('cleanser') || productType.includes('foam')) {
    return 'https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=800&h=450&fit=crop&auto=format';
  } else if (productType.includes('sunscreen') || productType.includes('spf')) {
    return 'https://images.unsplash.com/photo-1556228453-efd6c1ff04f6?w=800&h=450&fit=crop&auto=format';
  } else {
    // Generic premium cosmetic product
    return 'https://images.unsplash.com/photo-1570194065650-d99fb4bedf0a?w=800&h=450&fit=crop&auto=format';
  }
}
